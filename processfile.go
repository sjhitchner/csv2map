package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"text/template"
)

const (
	TEMPLATE = `// Auto-generated by csv2map Do Not Edit
package {{.Package}}

var {{.Name}} = map[string]string { {{range .Entries}}
	"{{.Key}}": "{{.Value}}",{{end}}
}
`
)

var (
	mapTemplate = template.Must(template.New("map").Parse(TEMPLATE))
)

type MapEntry struct {
	Key   string
	Value string
}

type mapTemplateData struct {
	Package string
	Name    string
	Entries []MapEntry
}

func processFile(reader *csv.Reader, keyIndex, valueIndex int, headerRow bool) ([]MapEntry, error) {
	entries := []MapEntry{}
	for i := 0; true; i++ {
		row, err := reader.Read()
		if err == io.EOF {
			break
		}

		if err != nil {
			return nil, err
		}

		if headerRow && i == 0 {
			continue
		}

		numFields := len(row)
		if keyIndex > numFields {
			return nil, fmt.Errorf("key index '%d' > number of fields '%d'", keyIndex, numFields)
		}
		if valueIndex > numFields {
			return nil, fmt.Errorf("value index '%d' > number of fields '%d'", valueIndex, numFields)
		}

		key := row[keyIndex-1]
		value := row[valueIndex-1]
		entries = append(entries, MapEntry{key, value})
	}
	return entries, nil
}

func render(w io.Writer, packageName string, mapName string, entries []MapEntry) error {
	return mapTemplate.Execute(w, mapTemplateData{packageName, mapName, entries})
}
